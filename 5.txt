# ѕрограммирование на €зыке высокого уровн€ (Python).
# https://www.yuripetrov.ru/edu/python
# «адание task_05_02_05.
#
# ¬ыполнил: —олодухин
# √руппа: јƒЁ”-201

def is_leap(год):
    l = √од - 2000
    если (l % 4) = = 0:
        return True
    остальное:
        return False



def days(мес€ц, год):
   если (мес€ц = = 1) или (мес€ц = = 4) или (мес€ц = = 6) или (мес€ц = = 9) или (мес€ц == 11):
       возвращение 30
   если (мес€ц = = 3) или (мес€ц = = 5) или (мес€ц = = 7) или (мес€ц = = 8) или (мес€ц = = 10) или (мес€ц == 12):
       возвращение 31
   если мес€ц = = 2:
       если is_leap(год):
           возвращение 29
       остальное:
           возвращение 28



def previous_date(день, мес€ц, год):
    если день = = 1:
        если мес€ц = = 1 или мес€ц = = 11 или мес€ц = = 9 или мес€ц = = 8 или мес€ц = = 6 или мес€ц = = 4:
            если мес€ц = = 1:
                возврат (31, 12, год - 1)
            остальное:
                возврат (31, мес€ц - 1, год)
        если мес€ц = = 12 или мес€ц = = 10 или мес€ц = = 7 или мес€ц = = 5 или мес€ц = = 2:
            возврат (30, мес€ц - 1, год)
        если мес€ц = = 3:
            если is_leap(год):
                возврат (29, мес€ц - 1, год)
            остальное:
                возврат (28, мес€ц - 1, год)
    остальное:
        возврат (день - 1, мес€ц, год)







def next_date(день, мес€ц, год):
    если день = = 29:
        если мес€ц = = 2:
            если is_leap(год):
                возврат (1, мес€ц + 1, год)
            остальное:
                return("такой даты не существует")
     день Ёлифа = = 28:
        если мес€ц = = 2:
            если нет (is_leap(год)):
                возврат (1, мес€ц + 1, год)
            остальное:
                возврат (день + 1, мес€ц, год)
    если день = = 30:
        если (мес€ц = = 1) или (мес€ц = = 4) или (мес€ц = = 6) или (мес€ц = = 9) или (мес€ц == 11):
            возврат (1, мес€ц + 1, год)
        остальное:
            возврат (день + 1, мес€ц, год)
    если день = = 31:
        если (мес€ц = = 3) или (мес€ц = = 5) или (мес€ц = = 7) или (мес€ц = = 8) или (мес€ц = = 10) или (мес€ц == 12):
            если мес€ц = = 12:
                возврат (1, 1, год + 1)
            остальное:
                возврат (1, мес€ц + 1, год)
    остальное:
        возврат (день + 1, мес€ц, год)






def another_date(день, мес€ц, год, ƒельта):
    дата = [день, мес€ц, год]
    если дельта > > 0:
        дл€ i в диапазоне(0, дельта + 1):
            date = next_date(дата[0], дата[1], ƒата[2])

    elif delta < 0:
        дл€ i в диапазоне(0, abs(дельта) + 1):
            date = previous_date(дата[0], дата[1], ƒата[2])
    остальное:
        return f'ƒата остаетс€ та же!!!'
     дата возврата


print(is_leap(2030))
печать(дней(8, 2000))
print(previous_date(1, 2, 2000))
print(next_date(1, 2, 2000))
print(another_date(1, 1, 2000, 9))


# --------------
# ѕример вывода:
#
# ƒень, мес€ц, год через пробел: 1 1 2000
# —вдиг (может быть отрицательным): -2
# Ќовый день: 30/12/1999
#
# ƒень, мес€ц, год через пробел: 1 1 2000
# —вдиг (может быть отрицательным): 2
# Ќовый день: 03/01/2000
